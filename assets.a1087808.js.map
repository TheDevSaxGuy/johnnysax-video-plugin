{"version":3,"sources":["assets/MediaPlayer.ts","assets/plugins/AutoPlay.ts","assets/plugins/AutoPause.ts","assets/index.ts"],"names":[],"mappings":";AAgDE,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhDF,IAAA,EAAA,WAKE,SAAA,EAAY,GACL,KAAA,MAAQ,EAAO,GACf,KAAA,QAAU,EAAO,SAAW,GAC5B,KAAA,aACA,KAAA,cAqCT,OAlCE,EAAA,UAAA,WAAA,WACO,KAAA,UAAY,SAAS,cAAc,OACnC,KAAA,UAAU,MAAM,SAAS,WACzB,KAAA,MAAM,WAAW,aAAa,KAAK,UAAU,KAAK,OAClD,KAAA,UAAU,YAAY,KAAK,QAG1B,EAAA,UAAA,YAAR,WAAA,IAAA,EAAA,KACO,KAAA,QAAQ,QAAQ,SAAA,GACnB,EAAO,IAAI,MAGf,EAAA,UAAA,KAAA,WACO,KAAA,MAAM,QAEb,EAAA,UAAA,MAAA,WACO,KAAA,MAAM,SAEb,EAAA,UAAA,WAAA,WACM,KAAK,MAAM,OACR,KAAA,OAEA,KAAA,SAGT,EAAA,UAAA,KAAA,WACO,KAAA,MAAM,OAAQ,GAErB,EAAA,UAAA,OAAA,WACO,KAAA,MAAM,OAAQ,GAErB,EAAA,UAAA,WAAA,WACO,KAAA,MAAM,OAAS,KAAK,MAAM,OAEnC,EA9CA,GAgDE,QAAA,QAAe;;ACrCjB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAVA,IAAA,EAAA,WACI,SAAA,KAOJ,OANI,EAAA,UAAA,IAAA,SAAI,GACK,EAAO,MAAM,QACd,EAAO,MAAM,OAAQ,GAEzB,EAAO,QAEf,EARA,GAUA,QAAA,QAAe;;ACoCf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7CA,IAAA,EAAA,WAII,SAAA,IACS,KAAA,UAAY,IACZ,KAAA,mBAAqB,KAAK,mBAAmB,KAAK,MAClD,KAAA,uBAAyB,KAAK,uBAAuB,KAAK,MAoCvE,OAjCI,EAAA,UAAA,IAAA,SAAI,GACK,KAAA,OAAS,EACG,IAAI,qBAAqB,KAAK,mBAAoB,CAAC,UAAU,KAAK,YAC1E,QAAQ,EAAO,OACxB,SAAS,iBAAiB,mBAAmB,KAAK,yBAE7C,EAAA,UAAA,mBAAR,SAA2B,GACV,EAAS,GAGC,mBAAoB,KAAK,UAGxC,KAAA,OAAO,OAIP,KAAA,OAAO,SAKX,EAAA,UAAA,uBAAR,WACgD,WAA1B,SAAS,gBAEnB,KAAA,OAAO,OAGP,KAAA,OAAO,SAKxB,EA3CA,GA6CA,QAAA,QAAe;;AC9Bf,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjBA,IAAA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,wBAGM,EAAQ,SAAS,cAAc,SAC/B,EAAS,IAAI,EAAA,QAAY,CAAE,GAAI,EAAO,QAAQ,CAChD,IAAI,EAAA,QACJ,IAAI,EAAA,WAGF,EAAyB,SAAS,cAAc,SAChD,EAAyB,SAAS,cAAc,SAEtD,EAAW,QAAU,WAAO,EAAO,cACnC,EAAW,QAAQ,WAAK,EAAO","file":"assets.a1087808.js","sourceRoot":"..","sourcesContent":["class MediaPlayer {\r\n  media:HTMLMediaElement;\r\n  container:HTMLElement;\r\n  plugins: Array <any>;\r\n\r\n  constructor(config) {\r\n    this.media = config.el;\r\n    this.plugins = config.plugins || [];\r\n    this.initPlayer();\r\n    this.initPlugins();\r\n  }\r\n\r\n  initPlayer(){\r\n    this.container = document.createElement('div');\r\n    this.container.style.position='relative';\r\n    this.media.parentNode.insertBefore(this.container,this.media);\r\n    this.container.appendChild(this.media);\r\n  }\r\n  \r\n  private initPlugins() {\r\n    this.plugins.forEach(plugin => {\r\n      plugin.run(this);\r\n    });\r\n  }\r\n  play() {\r\n    this.media.play();\r\n  }\r\n  pause() {\r\n    this.media.pause();\r\n  }\r\n  togglePlay() {\r\n    if (this.media.paused) {\r\n      this.play();\r\n    } else {\r\n      this.pause();\r\n    }\r\n  }\r\n  mute() {\r\n    this.media.muted = true;\r\n  }\r\n  unmute() {\r\n    this.media.muted = false;\r\n  }\r\n  toggleMute() {\r\n    this.media.muted = !this.media.muted;\r\n  }\r\n}\r\n\r\n  export default MediaPlayer;","import MediaPlayer from '../MediaPlayer'\r\nclass AutoPlay {\r\n    constructor() { }\r\n    run(player: MediaPlayer) {\r\n        if (!player.media.muted) {\r\n            player.media.muted = true;\r\n        }\r\n        player.play();\r\n    }\r\n}\r\n\r\nexport default AutoPlay;","import MediaPlayer from \"../MediaPlayer\";\r\n\r\nclass AutoPause{\r\n    private threshold:number;\r\n    player: MediaPlayer;\r\n\r\n    constructor(){\r\n        this.threshold = 0.25;\r\n        this.handleIntersaction = this.handleIntersaction.bind(this);\r\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\r\n\r\n    }\r\n    run(player){\r\n        this.player = player;\r\n        const observer = new IntersectionObserver(this.handleIntersaction, {threshold:this.threshold});\r\n        observer.observe(player.media);\r\n        document.addEventListener('visibilitychange',this.handleVisibilityChange)\r\n    }\r\n     private handleIntersaction(entries: IntersectionObserverEntry[]){\r\n        const entry = entries [0];\r\n        \r\n\r\n        const isVisible = entry.intersectionRatio >=this.threshold;\r\n\r\n        if (isVisible){\r\n            this.player.play();\r\n\r\n        }\r\n        else{\r\n            this.player.pause();\r\n\r\n        }\r\n\r\n     };\r\n     private handleVisibilityChange(){\r\n         const isVisible = document.visibilityState=='visible';\r\n         if(isVisible){\r\n            this.player.play();\r\n         }\r\n         else{\r\n            this.player.pause();\r\n         }\r\n\r\n\r\n     }\r\n}\r\n\r\nexport default AutoPause;","import MediaPlayer from './MediaPlayer';\r\nimport AutoPlay from './plugins/AutoPlay';\r\nimport AutoPause from './plugins/AutoPause';\r\n\r\n\r\nconst video = document.querySelector('video');\r\nconst player = new MediaPlayer({ el: video ,plugins:[\r\n    new AutoPlay(),\r\n    new AutoPause(),\r\n]});\r\n\r\nconst playButton:HTMLElement = document.querySelector('#play');\r\nconst muteButton:HTMLElement = document.querySelector('#mute');\r\n\r\nplayButton.onclick = () =>{ player.togglePlay();};\r\nmuteButton.onclick=()=>{player.toggleMute();}\r\n\r\n/* TEMPORARY DISABLED DUE TO A PROBLEM WITH SERVICE WORKERS\r\nif('serviceWorker' in navigator){\r\n    navigator.serviceWorker.register('../sw.js').catch(error =>{\r\n        console.log(error.message)\r\n    });\r\n}*/"]}